/*
 * Copyright 1999 - 2013 Herb Bowie
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.powersurgepub.psdatalib.clubplanner;

  import com.powersurgepub.psdatalib.psdata.*;
  import com.powersurgepub.psdatalib.pslist.*;
  import com.powersurgepub.psdatalib.pstags.*;
  import com.powersurgepub.psutils.*;
  import java.io.*;
  import java.math.*;
  import java.util.*;
 
  /*
   This item class definition generated by PSTextMerge using:
 
     template:  item-class.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

/**
 A single event, or other item to be tracked by the club.

 @author Herb Bowie
 */
public class ClubEvent
    implements
      // Generated by PSTextMerge using template taggable-implements.java.
      Taggable,
            Comparable,
            PSItem
			 {

  private static final RecordDefinition recDef;


  /*
   Following code generated by PSTextMerge using:
 
     template:  variable-definitions.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  /**
   A string describing the calendar year, or a range of consecutive calendar years, that define the club operating year in which this event takes place.
   */
  private String year = null;
 
  public static final String YEAR_FIELD_NAME = "Year";
 
  public static final String YEAR_COLUMN_NAME = "Year";
 
  public static final String YEAR_COMMON_NAME = "year";
 
  public static final int YEAR_COLUMN_INDEX = 0;
 
  public static final int YEAR_COLUMN_WIDTH = 12;
 

  /**
   The category assigned to the event.
   */
  private String type = null;
 
  public static final String TYPE_FIELD_NAME = "Type";
 
  public static final String TYPE_COLUMN_NAME = "Type";
 
  public static final String TYPE_COMMON_NAME = "type";
 
  public static final int TYPE_COLUMN_INDEX = 1;
 
  public static final int TYPE_COLUMN_WIDTH = 20;
 

  /**
   The sequence of discussion at a Board meeting.
   */
  private String seq = null;
 
  public static final String SEQ_FIELD_NAME = "Seq";
 
  public static final String SEQ_COLUMN_NAME = "Seq";
 
  public static final String SEQ_COMMON_NAME = "seq";
 
  public static final int SEQ_COLUMN_INDEX = 2;
 
  public static final int SEQ_COLUMN_WIDTH = 4;
 

  /**
   One or more tags indicating the status of the event.
   */
  private Tags status = new Tags();
 
  public static final String STATUS_FIELD_NAME = "Status";
 
  public static final String STATUS_COLUMN_NAME = "Status";
 
  public static final String STATUS_COMMON_NAME = "status";
 
  public static final int STATUS_COLUMN_INDEX = 3;
 
  public static final int STATUS_COLUMN_WIDTH = 12;
 
  private TagsNode tagsNode = null;

  /**
   An indication of the date and time that the event will be held, in a format emphasizing human readability. This need not be a complete date. It need not and generally should not contain the year, since this can be inferred from the operating year identified in the higher level folder. If an exact date is known, then this field should generally start with a three-character abbreviation for the day of the week. Three-character abbreviations for the month are also recognized and encouraged. Following are perfectly good examples of dates: Apr; Sat May 5; Thu Sun Mar 25 5:30 - 7:30 PM.
   */
  private String when = null;
 
  public static final String WHEN_FIELD_NAME = "When";
 
  public static final String WHEN_COLUMN_NAME = "When";
 
  public static final String WHEN_COMMON_NAME = "when";
 
  public static final int WHEN_COLUMN_INDEX = 4;
 
  public static final int WHEN_COLUMN_WIDTH = 20;
 

  /**
   A full or partial date in year, month, day sequence.
   */
  private String ymd = null;
 
  public static final String YMD_FIELD_NAME = "YMD";
 
  public static final String YMD_COLUMN_NAME = "YMD";
 
  public static final String YMD_COMMON_NAME = "ymd";
 
  public static final int YMD_COLUMN_INDEX = 5;
 
  public static final int YMD_COLUMN_WIDTH = 10;
 

  /**
   A brief descriptive title for the event.
   */
  private String what = null;
 
  public static final String WHAT_FIELD_NAME = "What";
 
  public static final String WHAT_COLUMN_NAME = "What";
 
  public static final String WHAT_COMMON_NAME = "what";
 
  public static final int WHAT_COLUMN_INDEX = 6;
 
  public static final int WHAT_COLUMN_WIDTH = 35;
 

  /**
   The location of the event, including the name of the venue and its address.
   */
  private String where = null;
 
  public static final String WHERE_FIELD_NAME = "Where";
 
  public static final String WHERE_COLUMN_NAME = "Where";
 
  public static final String WHERE_COMMON_NAME = "where";
 
  public static final int WHERE_COLUMN_INDEX = 7;
 
  public static final int WHERE_COLUMN_WIDTH = 30;
 

  /**
   Who is assigned to plan, coordinate and host the event. Can include multiple names. Can include email addresses and phone numbers.
   */
  private String who = null;
 
  public static final String WHO_FIELD_NAME = "Who";
 
  public static final String WHO_COLUMN_NAME = "Who";
 
  public static final String WHO_COMMON_NAME = "who";
 
  public static final int WHO_COLUMN_INDEX = 8;
 
  public static final int WHO_COLUMN_WIDTH = 20;
 

  /**
   Why does the club think it would be a good idea to host the event? If applying for Strategic Priority Funds, then why do we think this is a deserving event?
   */
  private String why = null;
 
  public static final String WHY_FIELD_NAME = "Why";
 
  public static final String WHY_COLUMN_NAME = "Why";
 
  public static final String WHY_COMMON_NAME = "why";
 
  public static final int WHY_COLUMN_INDEX = 9;
 
  public static final int WHY_COLUMN_WIDTH = 40;
 

  /**
   One to three sentences describing the event. Not intended to provide complete information, but intended to pique the reader's interest and motivate him to read further.
   */
  private String teaser = null;
 
  public static final String TEASER_FIELD_NAME = "Teaser";
 
  public static final String TEASER_COLUMN_NAME = "Teaser";
 
  public static final String TEASER_COMMON_NAME = "teaser";
 
  public static final int TEASER_COLUMN_INDEX = 10;
 
  public static final int TEASER_COLUMN_WIDTH = 40;
 

  /**
   Additional information about the event. Need not repeat information in the teaser, and need not repeat additional event details available from other fields, such as When and Where. This field can contain multiple paragraphs, separated by blank lines.
   */
  private String blurb = null;
 
  public static final String BLURB_FIELD_NAME = "Blurb";
 
  public static final String BLURB_COLUMN_NAME = "Blurb";
 
  public static final String BLURB_COMMON_NAME = "blurb";
 
  public static final int BLURB_COLUMN_INDEX = 11;
 
  public static final int BLURB_COLUMN_WIDTH = 40;
 

  /**
   The blurb, formatted as HTML.
   */
  private String blurbAsHtml = null;
 
  public static final String BLURB_AS_HTML_FIELD_NAME = "Blurb as HTML";
 
  public static final String BLURB_AS_HTML_COLUMN_NAME = "Blurb as HTML";
 
  public static final String BLURB_AS_HTML_COMMON_NAME = "blurbashtml";
 
  public static final int BLURB_AS_HTML_COLUMN_INDEX = 12;
 
  public static final int BLURB_AS_HTML_COLUMN_WIDTH = 50;
 

  /**
   The cost per person to attend the event. If the event is free, then leave this field blank.
   */
  private String cost = null;
 
  public static final String COST_FIELD_NAME = "Cost";
 
  public static final String COST_COLUMN_NAME = "Cost";
 
  public static final String COST_COMMON_NAME = "cost";
 
  public static final int COST_COLUMN_INDEX = 13;
 
  public static final int COST_COLUMN_WIDTH = 15;
 

  /**
   Instructions on how to purchase tickets to the event, if any.
   */
  private String purchase = null;
 
  public static final String PURCHASE_FIELD_NAME = "Purchase";
 
  public static final String PURCHASE_COLUMN_NAME = "Purchase";
 
  public static final String PURCHASE_COMMON_NAME = "purchase";
 
  public static final int PURCHASE_COLUMN_INDEX = 14;
 
  public static final int PURCHASE_COLUMN_WIDTH = 30;
 

  /**
   For purchasers, information on how they are to receive the tickets.
   */
  private String tickets = null;
 
  public static final String TICKETS_FIELD_NAME = "Tickets";
 
  public static final String TICKETS_COLUMN_NAME = "Tickets";
 
  public static final String TICKETS_COMMON_NAME = "tickets";
 
  public static final int TICKETS_COLUMN_INDEX = 15;
 
  public static final int TICKETS_COLUMN_WIDTH = 30;
 

  /**
   Number of seats or tickets available for the event; maximum number of attendees.
   */
  private String quantity = null;
 
  public static final String QUANTITY_FIELD_NAME = "Quantity";
 
  public static final String QUANTITY_COLUMN_NAME = "Qty";
 
  public static final String QUANTITY_COMMON_NAME = "quantity";
 
  public static final int QUANTITY_COLUMN_INDEX = 16;
 
  public static final int QUANTITY_COLUMN_WIDTH = 8;
 

  /**
   The amount of money we have planned to receive for the event. For this and the following dollar amount fields, multiple dollar figures may be interspersed with descriptive words. $20 x 40 will result in a planned income of $800.00, for example.
   */
  private String plannedIncome = null;
 
  public static final String PLANNED_INCOME_FIELD_NAME = "Planned Income";
 
  public static final String PLANNED_INCOME_COLUMN_NAME = "Pln Inc";
 
  public static final String PLANNED_INCOME_COMMON_NAME = "plannedincome";
 
  public static final int PLANNED_INCOME_COLUMN_INDEX = 17;
 
  public static final int PLANNED_INCOME_COLUMN_WIDTH = 12;
 

  /**
   Our actual income for the event.
   */
  private String actualIncome = null;
 
  public static final String ACTUAL_INCOME_FIELD_NAME = "Actual Income";
 
  public static final String ACTUAL_INCOME_COLUMN_NAME = "Act Inc";
 
  public static final String ACTUAL_INCOME_COMMON_NAME = "actualincome";
 
  public static final int ACTUAL_INCOME_COLUMN_INDEX = 18;
 
  public static final int ACTUAL_INCOME_COLUMN_WIDTH = 12;
 

  /**
   The amount of money we have planned/budgeted to be spent on the event.
   */
  private String plannedExpense = null;
 
  public static final String PLANNED_EXPENSE_FIELD_NAME = "Planned Expense";
 
  public static final String PLANNED_EXPENSE_COLUMN_NAME = "Pln Exp";
 
  public static final String PLANNED_EXPENSE_COMMON_NAME = "plannedexpense";
 
  public static final int PLANNED_EXPENSE_COLUMN_INDEX = 19;
 
  public static final int PLANNED_EXPENSE_COLUMN_WIDTH = 12;
 

  /**
   Our actual expenses for the event.
   */
  private String actualExpense = null;
 
  public static final String ACTUAL_EXPENSE_FIELD_NAME = "Actual Expense";
 
  public static final String ACTUAL_EXPENSE_COLUMN_NAME = "Act Exp";
 
  public static final String ACTUAL_EXPENSE_COMMON_NAME = "actualexpense";
 
  public static final int ACTUAL_EXPENSE_COLUMN_INDEX = 20;
 
  public static final int ACTUAL_EXPENSE_COLUMN_WIDTH = 12;
 

  /**
   The number of attendees built into our planning assumptions.
   */
  private String plannedAttendance = null;
 
  public static final String PLANNED_ATTENDANCE_FIELD_NAME = "Planned Attendance";
 
  public static final String PLANNED_ATTENDANCE_COLUMN_NAME = "Pln Attend";
 
  public static final String PLANNED_ATTENDANCE_COMMON_NAME = "plannedattendance";
 
  public static final int PLANNED_ATTENDANCE_COLUMN_INDEX = 21;
 
  public static final int PLANNED_ATTENDANCE_COLUMN_WIDTH = 8;
 

  /**
   The actual number of people who attended the event.
   */
  private String actualAttendance = null;
 
  public static final String ACTUAL_ATTENDANCE_FIELD_NAME = "Actual Attendance";
 
  public static final String ACTUAL_ATTENDANCE_COLUMN_NAME = "Act Attend";
 
  public static final String ACTUAL_ATTENDANCE_COMMON_NAME = "actualattendance";
 
  public static final int ACTUAL_ATTENDANCE_COLUMN_INDEX = 22;
 
  public static final int ACTUAL_ATTENDANCE_COLUMN_WIDTH = 8;
 

  /**
   The difference between our actuals and our planned income or expense.
   */
  private String overUnder = null;
 
  public static final String OVER_UNDER_FIELD_NAME = "Over/Under";
 
  public static final String OVER_UNDER_COLUMN_NAME = "Ovr/Und";
 
  public static final String OVER_UNDER_COMMON_NAME = "overunder";
 
  public static final int OVER_UNDER_COLUMN_INDEX = 23;
 
  public static final int OVER_UNDER_COLUMN_WIDTH = 8;
 

  /**
   The projected impacted on our club finances, based on actuals, if available, or planned income/expense, if actuals are not yet available.
   */
  private String financeProjection = null;
 
  public static final String FINANCE_PROJECTION_FIELD_NAME = "Finance Projection";
 
  public static final String FINANCE_PROJECTION_COLUMN_NAME = "Fin Proj";
 
  public static final String FINANCE_PROJECTION_COMMON_NAME = "financeprojection";
 
  public static final int FINANCE_PROJECTION_COLUMN_INDEX = 24;
 
  public static final int FINANCE_PROJECTION_COLUMN_WIDTH = 8;
 

  /**
   A brief summary of how the event went. Can include lessons learned from the event.
   */
  private String recap = null;
 
  public static final String RECAP_FIELD_NAME = "Recap";
 
  public static final String RECAP_COLUMN_NAME = "Recap";
 
  public static final String RECAP_COMMON_NAME = "recap";
 
  public static final int RECAP_COLUMN_INDEX = 25;
 
  public static final int RECAP_COLUMN_WIDTH = 40;
 

  /**
   After the event has been added to the club web site, the ID assigned to the page by the Content Management System should be entered here. This will be identified in the URL for the event as the articleid, as in articleid=17, meaning that an ID of 17 should be entered here.
   */
  private String id = null;
 
  public static final String ID_FIELD_NAME = "ID";
 
  public static final String ID_COLUMN_NAME = "ID";
 
  public static final String ID_COMMON_NAME = "id";
 
  public static final int ID_COLUMN_INDEX = 26;
 
  public static final int ID_COLUMN_WIDTH = 4;
 

  /**
   A URL pointing to a Web page with more information about the event.
   */
  private String link = null;
 
  public static final String LINK_FIELD_NAME = "Link";
 
  public static final String LINK_COLUMN_NAME = "Link";
 
  public static final String LINK_COMMON_NAME = "link";
 
  public static final int LINK_COLUMN_INDEX = 27;
 
  public static final int LINK_COLUMN_WIDTH = 30;
 

  /**
   A URL pointing to a Web page with more information about the venue for the event.
   */
  private String venue = null;
 
  public static final String VENUE_FIELD_NAME = "Venue";
 
  public static final String VENUE_COLUMN_NAME = "Venue";
 
  public static final String VENUE_COMMON_NAME = "venue";
 
  public static final int VENUE_COLUMN_INDEX = 28;
 
  public static final int VENUE_COLUMN_WIDTH = 30;
 

  /**
   A URL pointing to an image that can be used to help advertise the event.
   */
  private String image = null;
 
  public static final String IMAGE_FIELD_NAME = "Image";
 
  public static final String IMAGE_COLUMN_NAME = "Image";
 
  public static final String IMAGE_COMMON_NAME = "image";
 
  public static final int IMAGE_COLUMN_INDEX = 29;
 
  public static final int IMAGE_COLUMN_WIDTH = 30;
 

  /**
   A URL pointing to an image suitable for use in our newsletter.
   */
  private String newsImage = null;
 
  public static final String NEWS_IMAGE_FIELD_NAME = "News Image";
 
  public static final String NEWS_IMAGE_COLUMN_NAME = "News Image";
 
  public static final String NEWS_IMAGE_COMMON_NAME = "newsimage";
 
  public static final int NEWS_IMAGE_COLUMN_INDEX = 30;
 
  public static final int NEWS_IMAGE_COLUMN_WIDTH = 30;
 

  /**
   Brief, human-readable date.
   */
  private String shortDate = null;
 
  public static final String SHORT_DATE_FIELD_NAME = "Short Date";
 
  public static final String SHORT_DATE_COLUMN_NAME = "Short Date";
 
  public static final String SHORT_DATE_COMMON_NAME = "shortdate";
 
  public static final int SHORT_DATE_COLUMN_INDEX = 31;
 
  public static final int SHORT_DATE_COLUMN_WIDTH = 12;
 

  /**
   Identification of any issues to be discussed at an upcoming board meeting.
   */
  private String discuss = null;
 
  public static final String DISCUSS_FIELD_NAME = "Discuss";
 
  public static final String DISCUSS_COLUMN_NAME = "Discuss";
 
  public static final String DISCUSS_COMMON_NAME = "discuss";
 
  public static final int DISCUSS_COLUMN_INDEX = 32;
 
  public static final int DISCUSS_COLUMN_WIDTH = 40;
 

  /**
   One or more blocks of text with information about the event. This field can contain multiple paragraphs, separated by blank lines. Each block of text should be preceded by a line similar to the following example: -- AAUM on Feb 21 via email. Note that each such header line contains the following elements: Two hyphens and a space; identification of the source of the note; the date on which the information was communicated; the means by which the information was communicated.
   */
  private String notes = null;
 
  public static final String NOTES_FIELD_NAME = "Notes";
 
  public static final String NOTES_COLUMN_NAME = "Notes";
 
  public static final String NOTES_COMMON_NAME = "notes";
 
  public static final int NOTES_COLUMN_INDEX = 33;
 
  public static final int NOTES_COLUMN_WIDTH = 40;
 

  /**
   The Notes block, reformatted as HTML.
   */
  private String notesAsHtml = null;
 
  public static final String NOTES_AS_HTML_FIELD_NAME = "Notes as HTML";
 
  public static final String NOTES_AS_HTML_COLUMN_NAME = "Notes as HTML";
 
  public static final String NOTES_AS_HTML_COMMON_NAME = "notesashtml";
 
  public static final int NOTES_AS_HTML_COLUMN_INDEX = 34;
 
  public static final int NOTES_AS_HTML_COLUMN_WIDTH = 50;
 

  public static final int COLUMN_COUNT = 35;


  /*
   Following code generated by PSTextMerge using:
 
     template:  master-detail-definitions.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  /** Master-detail list for EventNotes. */
  private ArrayList<EventNote> eventNoteList = new ArrayList();

  private boolean modified = false;
 
  private String  diskLocation = "";
 
  private Comparator comparator = new ClubEventDefaultComparator();

  /**
   Static initializer.
   */
  static {
    DataDictionary dict = new DataDictionary();
    recDef = new RecordDefinition (dict);
    for (int i = 0; i < COLUMN_COUNT; i++) {
      recDef.addColumn (getColumnName(i));
    }
  }

  /**
   A constructor without any arguments.
   */
  public ClubEvent() {

  }
 
  /**
   Get the comparator to be used;
   */
  public Comparator getComparator() {
    return comparator;
  }
 
  /**
   Set the comparator to be used.
   */
  public void setComparator (Comparator comparator) {
    this.comparator = comparator;
  }
 
  /**
   Determine if this item has a key that is equal to the passed
   item.

   @param  obj2        The second object to be compared to this one.
   @param  comparator  The comparator to be used to make the comparison.
   @return True if the keys are equal.
   */
  public boolean equals (Object obj2, Comparator comparator) {
    return (this.compareTo (obj2, comparator) == 0);
  }
 
  /**
   Determine if this item has a key that is equal to the passed
   item.

   @param  obj2  The second object to be compared to this one.
   @return True if the keys are equal.
   */
  public boolean equals (Object obj2) {
    return (this.compareTo (obj2) == 0);
  }
 
  /**
   Compare this ClubEvent object to another, using the key field(s) for comparison.
 
   @param The second object to compare to this one.
 
   @return A number less than zero if this object is less than the second,
           a number greater than zero if this object is greater than the second,
           or zero if the two item's keys are equal.
   */
  public int compareTo (Object obj2, Comparator comparator) {
    if (comparator == null) {
      return -1;
    }
    return comparator.compare (this, obj2);
  }
 
  /**
   Compare this ClubEvent object to another, using the key field(s) for comparison.
 
   @param The second object to compare to this one.
 
   @return A number less than zero if this object is less than the second,
           a number greater than zero if this object is greater than the second,
           or zero if the two item's keys are equal.
   */
  public int compareTo (Object obj2) {
    if (comparator == null) {
      return -1;
    }
    return comparator.compare (this, obj2);
  }
 
  public void resetModified() {
    setModified (false);
  }
 
  public void setModified (boolean modified) {
    this.modified = modified;
  }
 
  public boolean isModified() {
    return modified;
  }
 
  /**
   Set the disk location at which this item is stored.
 
   @param diskLocation The path to the disk location at which this item
                       is stored.
  */
  public void setDiskLocation (String diskLocation) {
    this.diskLocation = diskLocation;
  }
 
  /**
   Set the disk location at which this item is stored.
 
   @param diskLocationFile The disk location at which this item is stored.
  */
  public void setDiskLocation (File diskLocationFile) {
    try {
      this.diskLocation = diskLocationFile.getCanonicalPath();
    } catch (java.io.IOException e) {
      this.diskLocation = diskLocationFile.getAbsolutePath();
    }
  }
 
  /**
   Indicate whether the item has a disk location.
 
   @return True if we've got a disk location, false otherwise.
  */
  public boolean hasDiskLocation() {
    return (diskLocation != null
        && diskLocation.length() > 0);
  }
 
  /**
   Return the disk location at which this item is stored.
 
   @return The disk location at which this item is stored.
  */
  public String getDiskLocation () {
    return diskLocation;
  }
 
  /**
   Find a common name (no punctuation, all lower-case) that starts with
   the passed string, if one exists.
 
   @param possibleFieldName The potential field name we're looking for. This
                            will be converted to a common name before it's
                            compared to the common forms of the field names.
 
   @return The index pointing to the first matching common name that was found,
           or -1 if no match was found.
  */
  public static int commonNameStartsWith (String possibleFieldName) {
    int i = 0;
    boolean fieldMatch = false;
    String possibleCommonName = StringUtils.commonName (possibleFieldName);
    while (i < COLUMN_COUNT && (! fieldMatch)) {
      if (getCommonName(i).startsWith(possibleCommonName)) {
        fieldMatch = true;
      } else {
        i++;
      }
    } // end while looking for field name match
    if (fieldMatch) {
      return i;
    } else {
      return -1;
    }
  }

  /**
   Return a record definition for the ClubEvent.
 
   @return A record definition using a new dictionary.
  */
  public static RecordDefinition getRecDef() {
    return recDef;
  }
 
  /**
   Return a standard data rec using the variables belonging to this object.
 
   @return A generic data record.
  */
  public DataRecord getDataRec() {
    DataRecord dataRec = new DataRecord();
    for (int i = 0; i < COLUMN_COUNT; i++) {
      Object columnValue = getColumnValue(i);
      String columnValueStr = "";
      if (columnValue != null) {
        columnValueStr = columnValue.toString();
      }
      int dataRecFieldNumber = dataRec.addField(recDef, columnValueStr);
    }
    return dataRec;
  }
 

  /*
   Following code generated by PSTextMerge using:
 
     template:  duplicate.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Duplicates this item, making a deep copy.
   */
  public ClubEvent duplicate () {
    ClubEvent newClubEvent = new ClubEvent();
		String yearStr = new String(getYearAsString());
		newClubEvent.setYear(yearStr);
		String typeStr = new String(getTypeAsString());
		newClubEvent.setType(typeStr);
		String statusStr = new String(getStatusAsString());
		newClubEvent.setStatus(statusStr);
		String whenStr = new String(getWhenAsString());
		newClubEvent.setWhen(whenStr);
		String whatStr = new String(getWhatAsString());
		newClubEvent.setWhat(whatStr);
		String whereStr = new String(getWhereAsString());
		newClubEvent.setWhere(whereStr);
		String whoStr = new String(getWhoAsString());
		newClubEvent.setWho(whoStr);
		String whyStr = new String(getWhyAsString());
		newClubEvent.setWhy(whyStr);
		String teaserStr = new String(getTeaserAsString());
		newClubEvent.setTeaser(teaserStr);
		String blurbStr = new String(getBlurbAsString());
		newClubEvent.setBlurb(blurbStr);
		String costStr = new String(getCostAsString());
		newClubEvent.setCost(costStr);
		String purchaseStr = new String(getPurchaseAsString());
		newClubEvent.setPurchase(purchaseStr);
		String ticketsStr = new String(getTicketsAsString());
		newClubEvent.setTickets(ticketsStr);
		String quantityStr = new String(getQuantityAsString());
		newClubEvent.setQuantity(quantityStr);
		String plannedIncomeStr = new String(getPlannedIncomeAsString());
		newClubEvent.setPlannedIncome(plannedIncomeStr);
		String actualIncomeStr = new String(getActualIncomeAsString());
		newClubEvent.setActualIncome(actualIncomeStr);
		String plannedExpenseStr = new String(getPlannedExpenseAsString());
		newClubEvent.setPlannedExpense(plannedExpenseStr);
		String actualExpenseStr = new String(getActualExpenseAsString());
		newClubEvent.setActualExpense(actualExpenseStr);
		String plannedAttendanceStr = new String(getPlannedAttendanceAsString());
		newClubEvent.setPlannedAttendance(plannedAttendanceStr);
		String actualAttendanceStr = new String(getActualAttendanceAsString());
		newClubEvent.setActualAttendance(actualAttendanceStr);
		String recapStr = new String(getRecapAsString());
		newClubEvent.setRecap(recapStr);
		String idStr = new String(getIdAsString());
		newClubEvent.setId(idStr);
		String linkStr = new String(getLinkAsString());
		newClubEvent.setLink(linkStr);
		String venueStr = new String(getVenueAsString());
		newClubEvent.setVenue(venueStr);
		String imageStr = new String(getImageAsString());
		newClubEvent.setImage(imageStr);
		String newsImageStr = new String(getNewsImageAsString());
		newClubEvent.setNewsImage(newsImageStr);
		String discussStr = new String(getDiscussAsString());
		newClubEvent.setDiscuss(discussStr);
		String notesStr = new String(getNotesAsString());
		newClubEvent.setNotes(notesStr);
		return newClubEvent;
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  master-io-methods.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
   Determine if this item has a local path.

   @return True if this item has a local path.
   */
  public boolean hasLocalPath () {

    return (hasFolderName() && hasFileName());
  }

  /**
   Return the local path identifying the disk location of this item.
 
   @return the folder name plus the file name, without any file extension.
   */
   public String getLocalPath() {
     return getFolderName() + getFileName();
   }
  /**
   Does the item have a valid folder name?
 
   @return True if the folder name field for this item is neither null nor blank.
   */
  public boolean hasFolderName() {
		if (getType() == null) {
			return false;
		}
		else
		if (getType().toString().length() == 0) {
			return false;
		} else {
			return true;
		}
	}
	
	/**
	 Return the name of the folder in which this item should be stored.
	
	 @return The folder name to be used, followed by a slash, or an empty
	         string, if the folder name field is blank or null.
	 */
	public String getFolderName() {
		if (getType() == null) {
			return "";
		}
		else
		if (getType().toString().length() == 0) {
			return "";
		} else {
			return StringUtils.makeReadableFileName (getType().toString()) + "/";
		}
	}
  /**
   Does the item have a valid file name?
 
   @return True if the file name field for this item is neither null nor blank.
   */
  public boolean hasFileName() {
		if (getWhat() == null) {
			return false;
		}
		else
		if (getWhat().toString().length() == 0) {
			return false;
		} else {
			return true;
		}
	}
	
	/**
	 Return the file name in which this item should be stored.
	
	 @return The file name to be used, without a file extension.
	 */
	public String getFileName() {
		if (getWhat() == null) {
			return "";
		}
		else
		if (getWhat().toString().length() == 0) {
			return "";
		} else {
			return StringUtils.makeReadableFileName (getWhat().toString());
		}
	}

  /*
   Following code generated by PSTextMerge using:
 
     template:  haskey-method.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
   Determine if this item has a key.

   @return True if this item has a key.
   */
  public boolean hasKey () {

    boolean hasKey = false;

		if (getWhat() == null) {
			// No key here
		}
		else
		if (getWhat().toString() == "") {
			// No key here
		} else {
			hasKey = true;
		}

		if (getSeq() == null) {
			// No key here
		}
		else
		if (getSeq().toString() == "") {
			// No key here
		} else {
			hasKey = true;
		}

    return hasKey;
  }
 
  /**
    Check for a search string within the given Club Event item.
 
    This method generated by PSTextMerge using template find.java.
 
    @param findLower   The search string in all lower case.
    @param findUpper   The search string in all upper case.
 
    @return True if this item contains the search string
            in one of its searchable fields.

   */
  public boolean find (String findLower, String findUpper) {

    boolean found = false;
    int fieldStart = -1;

    if (getWhat() != null
        && getWhat().length() > 0) {
      fieldStart = StringUtils.indexOfIgnoreCase (findLower, findUpper,
            getWhat(), 0);
      if (fieldStart >= 0) {
        found = true;
      }
    }

    if (getWhere() != null
        && getWhere().length() > 0) {
      fieldStart = StringUtils.indexOfIgnoreCase (findLower, findUpper,
            getWhere(), 0);
      if (fieldStart >= 0) {
        found = true;
      }
    }

    if (getWho() != null
        && getWho().length() > 0) {
      fieldStart = StringUtils.indexOfIgnoreCase (findLower, findUpper,
            getWho(), 0);
      if (fieldStart >= 0) {
        found = true;
      }
    }

    return found;
  }

  /**
    Return a string value representing the given item.
 
    This method generated by PSTextMerge using template toString.java.
 
    @return The string by which this item shall be known.

   */
  public String toString() {

    StringBuilder str = new StringBuilder();
    str.append(getWhat().toString());

    return str.toString();
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  merge.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Merges the contents of a second item into this one.
   */
  public void merge (ClubEvent clubEvent2) {
    Object obj2;
    String str2;
    obj2 = clubEvent2.getYear();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setYear ((String)obj2);
      }
    }
    obj2 = clubEvent2.getType();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setType ((String)obj2);
      }
    }
    obj2 = clubEvent2.getSeq();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setSeq ((String)obj2);
      }
    }
    obj2 = clubEvent2.getStatus();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setStatus ((Tags)obj2);
      }
    }
    obj2 = clubEvent2.getWhen();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhen ((String)obj2);
      }
    }
    obj2 = clubEvent2.getYmd();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setYmd ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhat();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhat ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhere();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhere ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWho();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWho ((String)obj2);
      }
    }
    obj2 = clubEvent2.getWhy();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setWhy ((String)obj2);
      }
    }
    obj2 = clubEvent2.getTeaser();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setTeaser ((String)obj2);
      }
    }
    obj2 = clubEvent2.getBlurb();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setBlurb ((String)obj2);
      }
    }
    obj2 = clubEvent2.getBlurbAsHtml();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setBlurbAsHtml ((String)obj2);
      }
    }
    obj2 = clubEvent2.getCost();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setCost ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPurchase();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPurchase ((String)obj2);
      }
    }
    obj2 = clubEvent2.getTickets();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setTickets ((String)obj2);
      }
    }
    obj2 = clubEvent2.getQuantity();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setQuantity ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPlannedIncome();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPlannedIncome ((String)obj2);
      }
    }
    obj2 = clubEvent2.getActualIncome();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setActualIncome ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPlannedExpense();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPlannedExpense ((String)obj2);
      }
    }
    obj2 = clubEvent2.getActualExpense();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setActualExpense ((String)obj2);
      }
    }
    obj2 = clubEvent2.getPlannedAttendance();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setPlannedAttendance ((String)obj2);
      }
    }
    obj2 = clubEvent2.getActualAttendance();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setActualAttendance ((String)obj2);
      }
    }
    obj2 = clubEvent2.getOverUnder();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setOverUnder ((String)obj2);
      }
    }
    obj2 = clubEvent2.getFinanceProjection();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setFinanceProjection ((String)obj2);
      }
    }
    obj2 = clubEvent2.getRecap();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setRecap ((String)obj2);
      }
    }
    obj2 = clubEvent2.getId();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setId ((String)obj2);
      }
    }
    obj2 = clubEvent2.getLink();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setLink ((String)obj2);
      }
    }
    obj2 = clubEvent2.getVenue();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setVenue ((String)obj2);
      }
    }
    obj2 = clubEvent2.getImage();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setImage ((String)obj2);
      }
    }
    obj2 = clubEvent2.getNewsImage();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setNewsImage ((String)obj2);
      }
    }
    obj2 = clubEvent2.getShortDate();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setShortDate ((String)obj2);
      }
    }
    obj2 = clubEvent2.getDiscuss();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setDiscuss ((String)obj2);
      }
    }
    obj2 = clubEvent2.getNotes();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setNotes ((String)obj2);
      }
    }
    obj2 = clubEvent2.getNotesAsHtml();
    if (obj2 == null) {
      // No value available -- leave current value as-is
    } else {
      str2 = obj2.toString();
      if (str2.equals ("")) {
        // No value available -- leave current value as-is
      } else {
        setNotesAsHtml ((String)obj2);
      }
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  setColumnValue.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
 
 /**
  Sets the column value indicated by the given column index.
 
  @param columnIndex An integer indicating the desired column whose value is to
                     be set.
  @param columnValue A string representing the value to be set.
  */
  public void setColumnValue (int columnIndex, String columnValue) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          setYear (columnValue);
          break;
      case TYPE_COLUMN_INDEX:
          setType (columnValue);
          break;
      case SEQ_COLUMN_INDEX:
          setSeq (columnValue);
          break;
      case STATUS_COLUMN_INDEX:
          setStatus (columnValue);
          break;
      case WHEN_COLUMN_INDEX:
          setWhen (columnValue);
          break;
      case YMD_COLUMN_INDEX:
          setYmd (columnValue);
          break;
      case WHAT_COLUMN_INDEX:
          setWhat (columnValue);
          break;
      case WHERE_COLUMN_INDEX:
          setWhere (columnValue);
          break;
      case WHO_COLUMN_INDEX:
          setWho (columnValue);
          break;
      case WHY_COLUMN_INDEX:
          setWhy (columnValue);
          break;
      case TEASER_COLUMN_INDEX:
          setTeaser (columnValue);
          break;
      case BLURB_COLUMN_INDEX:
          setBlurb (columnValue);
          break;
      case BLURB_AS_HTML_COLUMN_INDEX:
          setBlurbAsHtml (columnValue);
          break;
      case COST_COLUMN_INDEX:
          setCost (columnValue);
          break;
      case PURCHASE_COLUMN_INDEX:
          setPurchase (columnValue);
          break;
      case TICKETS_COLUMN_INDEX:
          setTickets (columnValue);
          break;
      case QUANTITY_COLUMN_INDEX:
          setQuantity (columnValue);
          break;
      case PLANNED_INCOME_COLUMN_INDEX:
          setPlannedIncome (columnValue);
          break;
      case ACTUAL_INCOME_COLUMN_INDEX:
          setActualIncome (columnValue);
          break;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          setPlannedExpense (columnValue);
          break;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          setActualExpense (columnValue);
          break;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          setPlannedAttendance (columnValue);
          break;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          setActualAttendance (columnValue);
          break;
      case OVER_UNDER_COLUMN_INDEX:
          setOverUnder (columnValue);
          break;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          setFinanceProjection (columnValue);
          break;
      case RECAP_COLUMN_INDEX:
          setRecap (columnValue);
          break;
      case ID_COLUMN_INDEX:
          setId (columnValue);
          break;
      case LINK_COLUMN_INDEX:
          setLink (columnValue);
          break;
      case VENUE_COLUMN_INDEX:
          setVenue (columnValue);
          break;
      case IMAGE_COLUMN_INDEX:
          setImage (columnValue);
          break;
      case NEWS_IMAGE_COLUMN_INDEX:
          setNewsImage (columnValue);
          break;
      case SHORT_DATE_COLUMN_INDEX:
          setShortDate (columnValue);
          break;
      case DISCUSS_COLUMN_INDEX:
          setDiscuss (columnValue);
          break;
      case NOTES_COLUMN_INDEX:
          setNotes (columnValue);
          break;
      case NOTES_AS_HTML_COLUMN_INDEX:
          setNotesAsHtml (columnValue);
          break;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  getColumnValue.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Returns the value at the given column index.
   */
  public Object getColumnValue (int columnIndex) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          return year;
      case TYPE_COLUMN_INDEX:
          return type;
      case SEQ_COLUMN_INDEX:
          return seq;
      case STATUS_COLUMN_INDEX:
          return status;
      case WHEN_COLUMN_INDEX:
          return when;
      case YMD_COLUMN_INDEX:
          return ymd;
      case WHAT_COLUMN_INDEX:
          return what;
      case WHERE_COLUMN_INDEX:
          return where;
      case WHO_COLUMN_INDEX:
          return who;
      case WHY_COLUMN_INDEX:
          return why;
      case TEASER_COLUMN_INDEX:
          return teaser;
      case BLURB_COLUMN_INDEX:
          return blurb;
      case BLURB_AS_HTML_COLUMN_INDEX:
          return blurbAsHtml;
      case COST_COLUMN_INDEX:
          return cost;
      case PURCHASE_COLUMN_INDEX:
          return purchase;
      case TICKETS_COLUMN_INDEX:
          return tickets;
      case QUANTITY_COLUMN_INDEX:
          return quantity;
      case PLANNED_INCOME_COLUMN_INDEX:
          return plannedIncome;
      case ACTUAL_INCOME_COLUMN_INDEX:
          return actualIncome;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          return plannedExpense;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          return actualExpense;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          return plannedAttendance;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          return actualAttendance;
      case OVER_UNDER_COLUMN_INDEX:
          return overUnder;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          return financeProjection;
      case RECAP_COLUMN_INDEX:
          return recap;
      case ID_COLUMN_INDEX:
          return id;
      case LINK_COLUMN_INDEX:
          return link;
      case VENUE_COLUMN_INDEX:
          return venue;
      case IMAGE_COLUMN_INDEX:
          return image;
      case NEWS_IMAGE_COLUMN_INDEX:
          return newsImage;
      case SHORT_DATE_COLUMN_INDEX:
          return shortDate;
      case DISCUSS_COLUMN_INDEX:
          return discuss;
      case NOTES_COLUMN_INDEX:
          return notes;
      case NOTES_AS_HTML_COLUMN_INDEX:
          return notesAsHtml;
      default: return null;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  getColumnName.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Returns the field name for the given column index.
   */
  public static String getColumnName (int columnIndex) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          return YEAR_COLUMN_NAME;
      case TYPE_COLUMN_INDEX:
          return TYPE_COLUMN_NAME;
      case SEQ_COLUMN_INDEX:
          return SEQ_COLUMN_NAME;
      case STATUS_COLUMN_INDEX:
          return STATUS_COLUMN_NAME;
      case WHEN_COLUMN_INDEX:
          return WHEN_COLUMN_NAME;
      case YMD_COLUMN_INDEX:
          return YMD_COLUMN_NAME;
      case WHAT_COLUMN_INDEX:
          return WHAT_COLUMN_NAME;
      case WHERE_COLUMN_INDEX:
          return WHERE_COLUMN_NAME;
      case WHO_COLUMN_INDEX:
          return WHO_COLUMN_NAME;
      case WHY_COLUMN_INDEX:
          return WHY_COLUMN_NAME;
      case TEASER_COLUMN_INDEX:
          return TEASER_COLUMN_NAME;
      case BLURB_COLUMN_INDEX:
          return BLURB_COLUMN_NAME;
      case BLURB_AS_HTML_COLUMN_INDEX:
          return BLURB_AS_HTML_COLUMN_NAME;
      case COST_COLUMN_INDEX:
          return COST_COLUMN_NAME;
      case PURCHASE_COLUMN_INDEX:
          return PURCHASE_COLUMN_NAME;
      case TICKETS_COLUMN_INDEX:
          return TICKETS_COLUMN_NAME;
      case QUANTITY_COLUMN_INDEX:
          return QUANTITY_COLUMN_NAME;
      case PLANNED_INCOME_COLUMN_INDEX:
          return PLANNED_INCOME_COLUMN_NAME;
      case ACTUAL_INCOME_COLUMN_INDEX:
          return ACTUAL_INCOME_COLUMN_NAME;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          return PLANNED_EXPENSE_COLUMN_NAME;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          return ACTUAL_EXPENSE_COLUMN_NAME;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          return PLANNED_ATTENDANCE_COLUMN_NAME;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          return ACTUAL_ATTENDANCE_COLUMN_NAME;
      case OVER_UNDER_COLUMN_INDEX:
          return OVER_UNDER_COLUMN_NAME;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          return FINANCE_PROJECTION_COLUMN_NAME;
      case RECAP_COLUMN_INDEX:
          return RECAP_COLUMN_NAME;
      case ID_COLUMN_INDEX:
          return ID_COLUMN_NAME;
      case LINK_COLUMN_INDEX:
          return LINK_COLUMN_NAME;
      case VENUE_COLUMN_INDEX:
          return VENUE_COLUMN_NAME;
      case IMAGE_COLUMN_INDEX:
          return IMAGE_COLUMN_NAME;
      case NEWS_IMAGE_COLUMN_INDEX:
          return NEWS_IMAGE_COLUMN_NAME;
      case SHORT_DATE_COLUMN_INDEX:
          return SHORT_DATE_COLUMN_NAME;
      case DISCUSS_COLUMN_INDEX:
          return DISCUSS_COLUMN_NAME;
      case NOTES_COLUMN_INDEX:
          return NOTES_COLUMN_NAME;
      case NOTES_AS_HTML_COLUMN_INDEX:
          return NOTES_AS_HTML_COLUMN_NAME;
      default: return null;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  getCommonName.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Returns the common name (all lower case, no word separators)
     for the given column index.
   */
  public static String getCommonName (int columnIndex) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          return YEAR_COMMON_NAME;
      case TYPE_COLUMN_INDEX:
          return TYPE_COMMON_NAME;
      case SEQ_COLUMN_INDEX:
          return SEQ_COMMON_NAME;
      case STATUS_COLUMN_INDEX:
          return STATUS_COMMON_NAME;
      case WHEN_COLUMN_INDEX:
          return WHEN_COMMON_NAME;
      case YMD_COLUMN_INDEX:
          return YMD_COMMON_NAME;
      case WHAT_COLUMN_INDEX:
          return WHAT_COMMON_NAME;
      case WHERE_COLUMN_INDEX:
          return WHERE_COMMON_NAME;
      case WHO_COLUMN_INDEX:
          return WHO_COMMON_NAME;
      case WHY_COLUMN_INDEX:
          return WHY_COMMON_NAME;
      case TEASER_COLUMN_INDEX:
          return TEASER_COMMON_NAME;
      case BLURB_COLUMN_INDEX:
          return BLURB_COMMON_NAME;
      case BLURB_AS_HTML_COLUMN_INDEX:
          return BLURB_AS_HTML_COMMON_NAME;
      case COST_COLUMN_INDEX:
          return COST_COMMON_NAME;
      case PURCHASE_COLUMN_INDEX:
          return PURCHASE_COMMON_NAME;
      case TICKETS_COLUMN_INDEX:
          return TICKETS_COMMON_NAME;
      case QUANTITY_COLUMN_INDEX:
          return QUANTITY_COMMON_NAME;
      case PLANNED_INCOME_COLUMN_INDEX:
          return PLANNED_INCOME_COMMON_NAME;
      case ACTUAL_INCOME_COLUMN_INDEX:
          return ACTUAL_INCOME_COMMON_NAME;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          return PLANNED_EXPENSE_COMMON_NAME;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          return ACTUAL_EXPENSE_COMMON_NAME;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          return PLANNED_ATTENDANCE_COMMON_NAME;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          return ACTUAL_ATTENDANCE_COMMON_NAME;
      case OVER_UNDER_COLUMN_INDEX:
          return OVER_UNDER_COMMON_NAME;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          return FINANCE_PROJECTION_COMMON_NAME;
      case RECAP_COLUMN_INDEX:
          return RECAP_COMMON_NAME;
      case ID_COLUMN_INDEX:
          return ID_COMMON_NAME;
      case LINK_COLUMN_INDEX:
          return LINK_COMMON_NAME;
      case VENUE_COLUMN_INDEX:
          return VENUE_COMMON_NAME;
      case IMAGE_COLUMN_INDEX:
          return IMAGE_COMMON_NAME;
      case NEWS_IMAGE_COLUMN_INDEX:
          return NEWS_IMAGE_COMMON_NAME;
      case SHORT_DATE_COLUMN_INDEX:
          return SHORT_DATE_COMMON_NAME;
      case DISCUSS_COLUMN_INDEX:
          return DISCUSS_COMMON_NAME;
      case NOTES_COLUMN_INDEX:
          return NOTES_COMMON_NAME;
      case NOTES_AS_HTML_COLUMN_INDEX:
          return NOTES_AS_HTML_COMMON_NAME;
      default: return null;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  getColumnWidth.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Returns the field name for the given column index.
   */
  public static int getColumnWidth (int columnIndex) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          return YEAR_COLUMN_WIDTH;
      case TYPE_COLUMN_INDEX:
          return TYPE_COLUMN_WIDTH;
      case SEQ_COLUMN_INDEX:
          return SEQ_COLUMN_WIDTH;
      case STATUS_COLUMN_INDEX:
          return STATUS_COLUMN_WIDTH;
      case WHEN_COLUMN_INDEX:
          return WHEN_COLUMN_WIDTH;
      case YMD_COLUMN_INDEX:
          return YMD_COLUMN_WIDTH;
      case WHAT_COLUMN_INDEX:
          return WHAT_COLUMN_WIDTH;
      case WHERE_COLUMN_INDEX:
          return WHERE_COLUMN_WIDTH;
      case WHO_COLUMN_INDEX:
          return WHO_COLUMN_WIDTH;
      case WHY_COLUMN_INDEX:
          return WHY_COLUMN_WIDTH;
      case TEASER_COLUMN_INDEX:
          return TEASER_COLUMN_WIDTH;
      case BLURB_COLUMN_INDEX:
          return BLURB_COLUMN_WIDTH;
      case BLURB_AS_HTML_COLUMN_INDEX:
          return BLURB_AS_HTML_COLUMN_WIDTH;
      case COST_COLUMN_INDEX:
          return COST_COLUMN_WIDTH;
      case PURCHASE_COLUMN_INDEX:
          return PURCHASE_COLUMN_WIDTH;
      case TICKETS_COLUMN_INDEX:
          return TICKETS_COLUMN_WIDTH;
      case QUANTITY_COLUMN_INDEX:
          return QUANTITY_COLUMN_WIDTH;
      case PLANNED_INCOME_COLUMN_INDEX:
          return PLANNED_INCOME_COLUMN_WIDTH;
      case ACTUAL_INCOME_COLUMN_INDEX:
          return ACTUAL_INCOME_COLUMN_WIDTH;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          return PLANNED_EXPENSE_COLUMN_WIDTH;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          return ACTUAL_EXPENSE_COLUMN_WIDTH;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          return PLANNED_ATTENDANCE_COLUMN_WIDTH;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          return ACTUAL_ATTENDANCE_COLUMN_WIDTH;
      case OVER_UNDER_COLUMN_INDEX:
          return OVER_UNDER_COLUMN_WIDTH;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          return FINANCE_PROJECTION_COLUMN_WIDTH;
      case RECAP_COLUMN_INDEX:
          return RECAP_COLUMN_WIDTH;
      case ID_COLUMN_INDEX:
          return ID_COLUMN_WIDTH;
      case LINK_COLUMN_INDEX:
          return LINK_COLUMN_WIDTH;
      case VENUE_COLUMN_INDEX:
          return VENUE_COLUMN_WIDTH;
      case IMAGE_COLUMN_INDEX:
          return IMAGE_COLUMN_WIDTH;
      case NEWS_IMAGE_COLUMN_INDEX:
          return NEWS_IMAGE_COLUMN_WIDTH;
      case SHORT_DATE_COLUMN_INDEX:
          return SHORT_DATE_COLUMN_WIDTH;
      case DISCUSS_COLUMN_INDEX:
          return DISCUSS_COLUMN_WIDTH;
      case NOTES_COLUMN_INDEX:
          return NOTES_COLUMN_WIDTH;
      case NOTES_AS_HTML_COLUMN_INDEX:
          return NOTES_AS_HTML_COLUMN_WIDTH;
      default: return 20;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  getColumnClass.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Returns the class of the field at the given column index.
   */
  public static Class getColumnClass (int columnIndex) {
    switch (columnIndex) {
      case YEAR_COLUMN_INDEX:
          return String.class;
      case TYPE_COLUMN_INDEX:
          return String.class;
      case SEQ_COLUMN_INDEX:
          return String.class;
      case STATUS_COLUMN_INDEX:
          return Tags.class;
      case WHEN_COLUMN_INDEX:
          return String.class;
      case YMD_COLUMN_INDEX:
          return String.class;
      case WHAT_COLUMN_INDEX:
          return String.class;
      case WHERE_COLUMN_INDEX:
          return String.class;
      case WHO_COLUMN_INDEX:
          return String.class;
      case WHY_COLUMN_INDEX:
          return String.class;
      case TEASER_COLUMN_INDEX:
          return String.class;
      case BLURB_COLUMN_INDEX:
          return String.class;
      case BLURB_AS_HTML_COLUMN_INDEX:
          return String.class;
      case COST_COLUMN_INDEX:
          return String.class;
      case PURCHASE_COLUMN_INDEX:
          return String.class;
      case TICKETS_COLUMN_INDEX:
          return String.class;
      case QUANTITY_COLUMN_INDEX:
          return String.class;
      case PLANNED_INCOME_COLUMN_INDEX:
          return String.class;
      case ACTUAL_INCOME_COLUMN_INDEX:
          return String.class;
      case PLANNED_EXPENSE_COLUMN_INDEX:
          return String.class;
      case ACTUAL_EXPENSE_COLUMN_INDEX:
          return String.class;
      case PLANNED_ATTENDANCE_COLUMN_INDEX:
          return String.class;
      case ACTUAL_ATTENDANCE_COLUMN_INDEX:
          return String.class;
      case OVER_UNDER_COLUMN_INDEX:
          return String.class;
      case FINANCE_PROJECTION_COLUMN_INDEX:
          return String.class;
      case RECAP_COLUMN_INDEX:
          return String.class;
      case ID_COLUMN_INDEX:
          return String.class;
      case LINK_COLUMN_INDEX:
          return String.class;
      case VENUE_COLUMN_INDEX:
          return String.class;
      case IMAGE_COLUMN_INDEX:
          return String.class;
      case NEWS_IMAGE_COLUMN_INDEX:
          return String.class;
      case SHORT_DATE_COLUMN_INDEX:
          return String.class;
      case DISCUSS_COLUMN_INDEX:
          return String.class;
      case NOTES_COLUMN_INDEX:
          return String.class;
      case NOTES_AS_HTML_COLUMN_INDEX:
          return String.class;
      default: return null;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  isMarkdownFormat.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
     Indicates whether the field at the given column index should be in Markdown format.
   */
  public static boolean isMarkdownFormat (int columnIndex) {
    switch (columnIndex) {
      case BLURB_COLUMN_INDEX:
          return true;
      case NOTES_COLUMN_INDEX:
          return true;
      default: return false;
    }
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  variable-methods.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
 
  /**
     Sets the year for this club event.
 
     @param  year The year for this club event.
   */
  public void setYear (String year) {
    this.year = year;
    setModified (true);
  }

  /**
    Returns the year for this club event as a string.
 
    @return The year for this club event as a string.
   */
  public String getYearAsString () {
    if (hasYear()) {
      return getYear().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the year for this club event is null.
 
    @return True if the year for this club event is not null.
   */
  public boolean hasYear () {
    return (year != null);
  }

  /**
    Returns the year for this club event.
 
    @return The year for this club event.
   */
  public String getYear () {
    return year;
  }
 
  /**
     Sets the type for this club event.
 
     @param  type The type for this club event.
   */
  public void setType (String type) {
    this.type = type;
    setModified (true);
  }

  /**
    Returns the type for this club event as a string.
 
    @return The type for this club event as a string.
   */
  public String getTypeAsString () {
    if (hasType()) {
      return getType().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the type for this club event is null.
 
    @return True if the type for this club event is not null.
   */
  public boolean hasType () {
    return (type != null);
  }

  /**
    Returns the type for this club event.
 
    @return The type for this club event.
   */
  public String getType () {
    return type;
  }
 
  /**
     Sets the seq for this club event.
 
     @param  seq The seq for this club event.
   */
  public void setSeq (String seq) {
    this.seq = seq;
    setModified (true);
  }

  /**
    Returns the seq for this club event as a string.
 
    @return The seq for this club event as a string.
   */
  public String getSeqAsString () {
    if (hasSeq()) {
      return getSeq().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the seq for this club event is null.
 
    @return True if the seq for this club event is not null.
   */
  public boolean hasSeq () {
    return (seq != null);
  }

  /**
    Returns the seq for this club event.
 
    @return The seq for this club event.
   */
  public String getSeq () {
    return seq;
  }
 
  /**
     Sets the status for this club event.
 
     @param  status The status for this club event.
   */
  public void setStatus (Tags status) {
    this.status = status;
    setModified (true);
  }

  /**
     Sets the status for this club event.
 
     @param  status The status for this club event.
   */
  public void setStatus (String status) {
    this.status = new Tags(status);
    setModified (true);
  }

  /**
    Returns the status for this club event as a string.
 
    @return The status for this club event as a string.
   */
  public String getStatusAsString () {
    if (hasStatus()) {
      return getStatus().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the status for this club event is null.
 
    @return True if the status for this club event is not null.
   */
  public boolean hasStatus () {
    return (status != null);
  }

  /**
    Returns the status for this club event.
 
    @return The status for this club event.
   */
  public Tags getStatus () {
    return status;
  }
 
  /**
     Sets the when for this club event.
 
     @param  when The when for this club event.
   */
  public void setWhen (String when) {
    this.when = when;
    setModified (true);
  }

  /**
    Returns the when for this club event as a string.
 
    @return The when for this club event as a string.
   */
  public String getWhenAsString () {
    if (hasWhen()) {
      return getWhen().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the when for this club event is null.
 
    @return True if the when for this club event is not null.
   */
  public boolean hasWhen () {
    return (when != null);
  }

  /**
    Returns the when for this club event.
 
    @return The when for this club event.
   */
  public String getWhen () {
    return when;
  }
 
  /**
     Sets the ymd for this club event.
 
     @param  ymd The ymd for this club event.
   */
  public void setYmd (String ymd) {
    this.ymd = ymd;
    setModified (true);
  }

  /**
    Returns the ymd for this club event as a string.
 
    @return The ymd for this club event as a string.
   */
  public String getYmdAsString () {
    if (hasYmd()) {
      return getYmd().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the ymd for this club event is null.
 
    @return True if the ymd for this club event is not null.
   */
  public boolean hasYmd () {
    return (ymd != null);
  }

  /**
    Returns the ymd for this club event.
 
    @return The ymd for this club event.
   */
  public String getYmd () {
    return ymd;
  }
 
  /**
     Sets the what for this club event.
 
     @param  what The what for this club event.
   */
  public void setWhat (String what) {
    this.what = what;
    setModified (true);
  }

  /**
    Returns the what for this club event as a string.
 
    @return The what for this club event as a string.
   */
  public String getWhatAsString () {
    if (hasWhat()) {
      return getWhat().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the what for this club event is null.
 
    @return True if the what for this club event is not null.
   */
  public boolean hasWhat () {
    return (what != null);
  }

  /**
    Returns the what for this club event.
 
    @return The what for this club event.
   */
  public String getWhat () {
    return what;
  }
 
  /**
     Sets the where for this club event.
 
     @param  where The where for this club event.
   */
  public void setWhere (String where) {
    this.where = where;
    setModified (true);
  }

  /**
    Returns the where for this club event as a string.
 
    @return The where for this club event as a string.
   */
  public String getWhereAsString () {
    if (hasWhere()) {
      return getWhere().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the where for this club event is null.
 
    @return True if the where for this club event is not null.
   */
  public boolean hasWhere () {
    return (where != null);
  }

  /**
    Returns the where for this club event.
 
    @return The where for this club event.
   */
  public String getWhere () {
    return where;
  }
 
  /**
     Sets the who for this club event.
 
     @param  who The who for this club event.
   */
  public void setWho (String who) {
    this.who = who;
    setModified (true);
  }

  /**
    Returns the who for this club event as a string.
 
    @return The who for this club event as a string.
   */
  public String getWhoAsString () {
    if (hasWho()) {
      return getWho().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the who for this club event is null.
 
    @return True if the who for this club event is not null.
   */
  public boolean hasWho () {
    return (who != null);
  }

  /**
    Returns the who for this club event.
 
    @return The who for this club event.
   */
  public String getWho () {
    return who;
  }
 
  /**
     Sets the why for this club event.
 
     @param  why The why for this club event.
   */
  public void setWhy (String why) {
    this.why = why;
    setModified (true);
  }

  /**
    Returns the why for this club event as a string.
 
    @return The why for this club event as a string.
   */
  public String getWhyAsString () {
    if (hasWhy()) {
      return getWhy().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the why for this club event is null.
 
    @return True if the why for this club event is not null.
   */
  public boolean hasWhy () {
    return (why != null);
  }

  /**
    Returns the why for this club event.
 
    @return The why for this club event.
   */
  public String getWhy () {
    return why;
  }
 
  /**
     Sets the teaser for this club event.
 
     @param  teaser The teaser for this club event.
   */
  public void setTeaser (String teaser) {
    this.teaser = teaser;
    setModified (true);
  }

  /**
    Returns the teaser for this club event as a string.
 
    @return The teaser for this club event as a string.
   */
  public String getTeaserAsString () {
    if (hasTeaser()) {
      return getTeaser().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the teaser for this club event is null.
 
    @return True if the teaser for this club event is not null.
   */
  public boolean hasTeaser () {
    return (teaser != null);
  }

  /**
    Returns the teaser for this club event.
 
    @return The teaser for this club event.
   */
  public String getTeaser () {
    return teaser;
  }
 
  /**
     Sets the blurb for this club event.
 
     @param  blurb The blurb for this club event.
   */
  public void setBlurb (String blurb) {
    this.blurb = blurb;
    setModified (true);
  }

  /**
    Returns the blurb for this club event as a string.
 
    @return The blurb for this club event as a string.
   */
  public String getBlurbAsString () {
    if (hasBlurb()) {
      return getBlurb().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the blurb for this club event is null.
 
    @return True if the blurb for this club event is not null.
   */
  public boolean hasBlurb () {
    return (blurb != null);
  }

  /**
    Returns the blurb for this club event.
 
    @return The blurb for this club event.
   */
  public String getBlurb () {
    return blurb;
  }
 
  /**
     Sets the blurb as html for this club event.
 
     @param  blurbAsHtml The blurb as html for this club event.
   */
  public void setBlurbAsHtml (String blurbAsHtml) {
    this.blurbAsHtml = blurbAsHtml;
    setModified (true);
  }

  /**
    Returns the blurb as html for this club event as a string.
 
    @return The blurb as html for this club event as a string.
   */
  public String getBlurbAsHtmlAsString () {
    if (hasBlurbAsHtml()) {
      return getBlurbAsHtml().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the blurb as html for this club event is null.
 
    @return True if the blurb as html for this club event is not null.
   */
  public boolean hasBlurbAsHtml () {
    return (blurbAsHtml != null);
  }

  /**
    Returns the blurb as html for this club event.
 
    @return The blurb as html for this club event.
   */
  public String getBlurbAsHtml () {
    return blurbAsHtml;
  }
 
  /**
     Sets the cost for this club event.
 
     @param  cost The cost for this club event.
   */
  public void setCost (String cost) {
    this.cost = cost;
    setModified (true);
  }

  /**
    Returns the cost for this club event as a string.
 
    @return The cost for this club event as a string.
   */
  public String getCostAsString () {
    if (hasCost()) {
      return getCost().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the cost for this club event is null.
 
    @return True if the cost for this club event is not null.
   */
  public boolean hasCost () {
    return (cost != null);
  }

  /**
    Returns the cost for this club event.
 
    @return The cost for this club event.
   */
  public String getCost () {
    return cost;
  }
 
  /**
     Sets the purchase for this club event.
 
     @param  purchase The purchase for this club event.
   */
  public void setPurchase (String purchase) {
    this.purchase = purchase;
    setModified (true);
  }

  /**
    Returns the purchase for this club event as a string.
 
    @return The purchase for this club event as a string.
   */
  public String getPurchaseAsString () {
    if (hasPurchase()) {
      return getPurchase().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the purchase for this club event is null.
 
    @return True if the purchase for this club event is not null.
   */
  public boolean hasPurchase () {
    return (purchase != null);
  }

  /**
    Returns the purchase for this club event.
 
    @return The purchase for this club event.
   */
  public String getPurchase () {
    return purchase;
  }
 
  /**
     Sets the tickets for this club event.
 
     @param  tickets The tickets for this club event.
   */
  public void setTickets (String tickets) {
    this.tickets = tickets;
    setModified (true);
  }

  /**
    Returns the tickets for this club event as a string.
 
    @return The tickets for this club event as a string.
   */
  public String getTicketsAsString () {
    if (hasTickets()) {
      return getTickets().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the tickets for this club event is null.
 
    @return True if the tickets for this club event is not null.
   */
  public boolean hasTickets () {
    return (tickets != null);
  }

  /**
    Returns the tickets for this club event.
 
    @return The tickets for this club event.
   */
  public String getTickets () {
    return tickets;
  }
 
  /**
     Sets the quantity for this club event.
 
     @param  quantity The quantity for this club event.
   */
  public void setQuantity (String quantity) {
    this.quantity = quantity;
    setModified (true);
  }

  /**
    Returns the quantity for this club event as a string.
 
    @return The quantity for this club event as a string.
   */
  public String getQuantityAsString () {
    if (hasQuantity()) {
      return getQuantity().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the quantity for this club event is null.
 
    @return True if the quantity for this club event is not null.
   */
  public boolean hasQuantity () {
    return (quantity != null);
  }

  /**
    Returns the quantity for this club event.
 
    @return The quantity for this club event.
   */
  public String getQuantity () {
    return quantity;
  }
 
  /**
     Sets the planned income for this club event.
 
     @param  plannedIncome The planned income for this club event.
   */
  public void setPlannedIncome (String plannedIncome) {
    this.plannedIncome = plannedIncome;
    setModified (true);
  }

  /**
    Returns the planned income for this club event as a string.
 
    @return The planned income for this club event as a string.
   */
  public String getPlannedIncomeAsString () {
    if (hasPlannedIncome()) {
      return getPlannedIncome().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the planned income for this club event is null.
 
    @return True if the planned income for this club event is not null.
   */
  public boolean hasPlannedIncome () {
    return (plannedIncome != null);
  }

  /**
    Returns the planned income for this club event.
 
    @return The planned income for this club event.
   */
  public String getPlannedIncome () {
    return plannedIncome;
  }
  /**
    Returns the planned income as a BigDecimal object.
 
    @return The planned income for this club event as a BigDecimal.
   */
  public BigDecimal getPlannedIncomeAsBigDecimal () {
    return StringUtils.calc(plannedIncome);
  }
 
  /**
     Sets the actual income for this club event.
 
     @param  actualIncome The actual income for this club event.
   */
  public void setActualIncome (String actualIncome) {
    this.actualIncome = actualIncome;
    setModified (true);
  }

  /**
    Returns the actual income for this club event as a string.
 
    @return The actual income for this club event as a string.
   */
  public String getActualIncomeAsString () {
    if (hasActualIncome()) {
      return getActualIncome().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the actual income for this club event is null.
 
    @return True if the actual income for this club event is not null.
   */
  public boolean hasActualIncome () {
    return (actualIncome != null);
  }

  /**
    Returns the actual income for this club event.
 
    @return The actual income for this club event.
   */
  public String getActualIncome () {
    return actualIncome;
  }
  /**
    Returns the actual income as a BigDecimal object.
 
    @return The actual income for this club event as a BigDecimal.
   */
  public BigDecimal getActualIncomeAsBigDecimal () {
    return StringUtils.calc(actualIncome);
  }
 
  /**
     Sets the planned expense for this club event.
 
     @param  plannedExpense The planned expense for this club event.
   */
  public void setPlannedExpense (String plannedExpense) {
    this.plannedExpense = plannedExpense;
    setModified (true);
  }

  /**
    Returns the planned expense for this club event as a string.
 
    @return The planned expense for this club event as a string.
   */
  public String getPlannedExpenseAsString () {
    if (hasPlannedExpense()) {
      return getPlannedExpense().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the planned expense for this club event is null.
 
    @return True if the planned expense for this club event is not null.
   */
  public boolean hasPlannedExpense () {
    return (plannedExpense != null);
  }

  /**
    Returns the planned expense for this club event.
 
    @return The planned expense for this club event.
   */
  public String getPlannedExpense () {
    return plannedExpense;
  }
  /**
    Returns the planned expense as a BigDecimal object.
 
    @return The planned expense for this club event as a BigDecimal.
   */
  public BigDecimal getPlannedExpenseAsBigDecimal () {
    return StringUtils.calc(plannedExpense);
  }
 
  /**
     Sets the actual expense for this club event.
 
     @param  actualExpense The actual expense for this club event.
   */
  public void setActualExpense (String actualExpense) {
    this.actualExpense = actualExpense;
    setModified (true);
  }

  /**
    Returns the actual expense for this club event as a string.
 
    @return The actual expense for this club event as a string.
   */
  public String getActualExpenseAsString () {
    if (hasActualExpense()) {
      return getActualExpense().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the actual expense for this club event is null.
 
    @return True if the actual expense for this club event is not null.
   */
  public boolean hasActualExpense () {
    return (actualExpense != null);
  }

  /**
    Returns the actual expense for this club event.
 
    @return The actual expense for this club event.
   */
  public String getActualExpense () {
    return actualExpense;
  }
  /**
    Returns the actual expense as a BigDecimal object.
 
    @return The actual expense for this club event as a BigDecimal.
   */
  public BigDecimal getActualExpenseAsBigDecimal () {
    return StringUtils.calc(actualExpense);
  }
 
  /**
     Sets the planned attendance for this club event.
 
     @param  plannedAttendance The planned attendance for this club event.
   */
  public void setPlannedAttendance (String plannedAttendance) {
    this.plannedAttendance = plannedAttendance;
    setModified (true);
  }

  /**
    Returns the planned attendance for this club event as a string.
 
    @return The planned attendance for this club event as a string.
   */
  public String getPlannedAttendanceAsString () {
    if (hasPlannedAttendance()) {
      return getPlannedAttendance().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the planned attendance for this club event is null.
 
    @return True if the planned attendance for this club event is not null.
   */
  public boolean hasPlannedAttendance () {
    return (plannedAttendance != null);
  }

  /**
    Returns the planned attendance for this club event.
 
    @return The planned attendance for this club event.
   */
  public String getPlannedAttendance () {
    return plannedAttendance;
  }
 
  /**
     Sets the actual attendance for this club event.
 
     @param  actualAttendance The actual attendance for this club event.
   */
  public void setActualAttendance (String actualAttendance) {
    this.actualAttendance = actualAttendance;
    setModified (true);
  }

  /**
    Returns the actual attendance for this club event as a string.
 
    @return The actual attendance for this club event as a string.
   */
  public String getActualAttendanceAsString () {
    if (hasActualAttendance()) {
      return getActualAttendance().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the actual attendance for this club event is null.
 
    @return True if the actual attendance for this club event is not null.
   */
  public boolean hasActualAttendance () {
    return (actualAttendance != null);
  }

  /**
    Returns the actual attendance for this club event.
 
    @return The actual attendance for this club event.
   */
  public String getActualAttendance () {
    return actualAttendance;
  }
 
  /**
     Sets the over under for this club event.
 
     @param  overUnder The over under for this club event.
   */
  public void setOverUnder (String overUnder) {
    this.overUnder = overUnder;
    setModified (true);
  }

  /**
    Returns the over under for this club event as a string.
 
    @return The over under for this club event as a string.
   */
  public String getOverUnderAsString () {
    if (hasOverUnder()) {
      return getOverUnder().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the over under for this club event is null.
 
    @return True if the over under for this club event is not null.
   */
  public boolean hasOverUnder () {
    return (overUnder != null);
  }

  /**
    Returns the over under for this club event.
 
    @return The over under for this club event.
   */
  public String getOverUnder () {
    return overUnder;
  }
  /**
    Returns the over under as a BigDecimal object.
 
    @return The over under for this club event as a BigDecimal.
   */
  public BigDecimal getOverUnderAsBigDecimal () {
    return StringUtils.calc(overUnder);
  }
 
  /**
     Sets the finance projection for this club event.
 
     @param  financeProjection The finance projection for this club event.
   */
  public void setFinanceProjection (String financeProjection) {
    this.financeProjection = financeProjection;
    setModified (true);
  }

  /**
    Returns the finance projection for this club event as a string.
 
    @return The finance projection for this club event as a string.
   */
  public String getFinanceProjectionAsString () {
    if (hasFinanceProjection()) {
      return getFinanceProjection().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the finance projection for this club event is null.
 
    @return True if the finance projection for this club event is not null.
   */
  public boolean hasFinanceProjection () {
    return (financeProjection != null);
  }

  /**
    Returns the finance projection for this club event.
 
    @return The finance projection for this club event.
   */
  public String getFinanceProjection () {
    return financeProjection;
  }
  /**
    Returns the finance projection as a BigDecimal object.
 
    @return The finance projection for this club event as a BigDecimal.
   */
  public BigDecimal getFinanceProjectionAsBigDecimal () {
    return StringUtils.calc(financeProjection);
  }
 
  /**
     Sets the recap for this club event.
 
     @param  recap The recap for this club event.
   */
  public void setRecap (String recap) {
    this.recap = recap;
    setModified (true);
  }

  /**
    Returns the recap for this club event as a string.
 
    @return The recap for this club event as a string.
   */
  public String getRecapAsString () {
    if (hasRecap()) {
      return getRecap().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the recap for this club event is null.
 
    @return True if the recap for this club event is not null.
   */
  public boolean hasRecap () {
    return (recap != null);
  }

  /**
    Returns the recap for this club event.
 
    @return The recap for this club event.
   */
  public String getRecap () {
    return recap;
  }
 
  /**
     Sets the id for this club event.
 
     @param  id The id for this club event.
   */
  public void setId (String id) {
    this.id = id;
    setModified (true);
  }

  /**
    Returns the id for this club event as a string.
 
    @return The id for this club event as a string.
   */
  public String getIdAsString () {
    if (hasId()) {
      return getId().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the id for this club event is null.
 
    @return True if the id for this club event is not null.
   */
  public boolean hasId () {
    return (id != null);
  }

  /**
    Returns the id for this club event.
 
    @return The id for this club event.
   */
  public String getId () {
    return id;
  }
 
  /**
     Sets the link for this club event.
 
     @param  link The link for this club event.
   */
  public void setLink (String link) {
    this.link = link;
    setModified (true);
  }

  /**
    Returns the link for this club event as a string.
 
    @return The link for this club event as a string.
   */
  public String getLinkAsString () {
    if (hasLink()) {
      return getLink().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the link for this club event is null.
 
    @return True if the link for this club event is not null.
   */
  public boolean hasLink () {
    return (link != null);
  }

  /**
    Returns the link for this club event.
 
    @return The link for this club event.
   */
  public String getLink () {
    return link;
  }
 
  /**
     Sets the venue for this club event.
 
     @param  venue The venue for this club event.
   */
  public void setVenue (String venue) {
    this.venue = venue;
    setModified (true);
  }

  /**
    Returns the venue for this club event as a string.
 
    @return The venue for this club event as a string.
   */
  public String getVenueAsString () {
    if (hasVenue()) {
      return getVenue().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the venue for this club event is null.
 
    @return True if the venue for this club event is not null.
   */
  public boolean hasVenue () {
    return (venue != null);
  }

  /**
    Returns the venue for this club event.
 
    @return The venue for this club event.
   */
  public String getVenue () {
    return venue;
  }
 
  /**
     Sets the image for this club event.
 
     @param  image The image for this club event.
   */
  public void setImage (String image) {
    this.image = image;
    setModified (true);
  }

  /**
    Returns the image for this club event as a string.
 
    @return The image for this club event as a string.
   */
  public String getImageAsString () {
    if (hasImage()) {
      return getImage().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the image for this club event is null.
 
    @return True if the image for this club event is not null.
   */
  public boolean hasImage () {
    return (image != null);
  }

  /**
    Returns the image for this club event.
 
    @return The image for this club event.
   */
  public String getImage () {
    return image;
  }
 
  /**
     Sets the news image for this club event.
 
     @param  newsImage The news image for this club event.
   */
  public void setNewsImage (String newsImage) {
    this.newsImage = newsImage;
    setModified (true);
  }

  /**
    Returns the news image for this club event as a string.
 
    @return The news image for this club event as a string.
   */
  public String getNewsImageAsString () {
    if (hasNewsImage()) {
      return getNewsImage().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the news image for this club event is null.
 
    @return True if the news image for this club event is not null.
   */
  public boolean hasNewsImage () {
    return (newsImage != null);
  }

  /**
    Returns the news image for this club event.
 
    @return The news image for this club event.
   */
  public String getNewsImage () {
    return newsImage;
  }
 
  /**
     Sets the short date for this club event.
 
     @param  shortDate The short date for this club event.
   */
  public void setShortDate (String shortDate) {
    this.shortDate = shortDate;
    setModified (true);
  }

  /**
    Returns the short date for this club event as a string.
 
    @return The short date for this club event as a string.
   */
  public String getShortDateAsString () {
    if (hasShortDate()) {
      return getShortDate().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the short date for this club event is null.
 
    @return True if the short date for this club event is not null.
   */
  public boolean hasShortDate () {
    return (shortDate != null);
  }

  /**
    Returns the short date for this club event.
 
    @return The short date for this club event.
   */
  public String getShortDate () {
    return shortDate;
  }
 
  /**
     Sets the discuss for this club event.
 
     @param  discuss The discuss for this club event.
   */
  public void setDiscuss (String discuss) {
    this.discuss = discuss;
    setModified (true);
  }

  /**
    Returns the discuss for this club event as a string.
 
    @return The discuss for this club event as a string.
   */
  public String getDiscussAsString () {
    if (hasDiscuss()) {
      return getDiscuss().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the discuss for this club event is null.
 
    @return True if the discuss for this club event is not null.
   */
  public boolean hasDiscuss () {
    return (discuss != null);
  }

  /**
    Returns the discuss for this club event.
 
    @return The discuss for this club event.
   */
  public String getDiscuss () {
    return discuss;
  }
 
  /**
     Sets the notes for this club event.
 
     @param  notes The notes for this club event.
   */
  public void setNotes (String notes) {
    this.notes = notes;
    setModified (true);
  }

  /**
    Returns the notes for this club event as a string.
 
    @return The notes for this club event as a string.
   */
  public String getNotesAsString () {
    if (hasNotes()) {
      return getNotes().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the notes for this club event is null.
 
    @return True if the notes for this club event is not null.
   */
  public boolean hasNotes () {
    return (notes != null);
  }

  /**
    Returns the notes for this club event.
 
    @return The notes for this club event.
   */
  public String getNotes () {
    return notes;
  }
 
  /**
     Sets the notes as html for this club event.
 
     @param  notesAsHtml The notes as html for this club event.
   */
  public void setNotesAsHtml (String notesAsHtml) {
    this.notesAsHtml = notesAsHtml;
    setModified (true);
  }

  /**
    Returns the notes as html for this club event as a string.
 
    @return The notes as html for this club event as a string.
   */
  public String getNotesAsHtmlAsString () {
    if (hasNotesAsHtml()) {
      return getNotesAsHtml().toString();
    } else {
      return "";
    }
  }

  /**
    Determines if the notes as html for this club event is null.
 
    @return True if the notes as html for this club event is not null.
   */
  public boolean hasNotesAsHtml () {
    return (notesAsHtml != null);
  }

  /**
    Returns the notes as html for this club event.
 
    @return The notes as html for this club event.
   */
  public String getNotesAsHtml () {
    return notesAsHtml;
  }

  /**
   Return the number of columns.
   */
  public static int getColumnCount() {
    return COLUMN_COUNT;
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  taggable-methods.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 

  /**
   Does this class have a Tags field?
 
   @return True if so, false if not.
   */
  public static boolean isClassTagged() {
    return true;
  }
 
  /**
   Return the tags assigned to this taggable item.
 
   @return The tags assigned.
   */
  public Tags getTags () {
    return status;
  }
 
  /**
   Flatten all the tags for this item, separating each level/word into its own
   first-level tag.
   */
  public void flattenTags() {
    status.flatten();
  }

  /**
   Convert the tags to all lower-case letters.
   */
  public void lowerCaseTags () {
    status.makeLowerCase();
  }
 
  /**
   Set the first TagsNode occurrence for this Taggable item. This is stored
   in a TagsModel occurrence.

   @param tagsNode The tags node to be stored.
   */
  public void setTagsNode (TagsNode tagsNode) {
    this.tagsNode = tagsNode;
  }

  /**
   Return the first TagsNode occurrence for this Taggable item. These nodes
   are stored in a TagsModel occurrence.

   @return The tags node stored.
   */
  public TagsNode getTagsNode (){
    return tagsNode;
  }

  /*
   Following code generated by PSTextMerge using:
 
     template:  master-detail-methods.java
     data file: /Users/hbowie/Java/projects/nbproj/clubplanner/javagen/fields.xls
   */
 
  /**
   Adds a new EventNote to the end of the internal detail list.
 
   @param eventNote The EventNote to be added.
 
   @return True if the list was modified.
  */
  public boolean addEventNote (EventNote eventNote) {
    return eventNoteList.add(eventNote);
  }
 
  /**
   Adds a new EventNote at the specified location.
 
   @param index The index position at which the EventNote should be added.
 
   @param eventNote The EventNote to be added.
  */
  public void addEventNote (int index, EventNote eventNote) {
    eventNoteList.add(index, eventNote);
  }
 
  /**
   Gets the EventNote at the specified location.
 
   @param index The desired location.
 
   @return The EventNote stored at that location.
  */
  public EventNote getEventNote (int index) {
    return eventNoteList.get(index);
  }
 
  /**
   Sets a new EventNote at the specified list location.
 
   @param index The index location in the internal table.
 
   @param eventNote The new EventNote to be placed there.
 
   @return The EventNote previously stored at that location.
  */
  public EventNote setEventNote (int index, EventNote eventNote) {
    return eventNoteList.set(index, eventNote);
  }
 
  /**
   Returns the size of the internal EventNote list.
 
   @return The size of the internal list of details.
  */
  public int sizeEventNoteList () {
    return eventNoteList.size();
  }

}
